 Part Two: Encrypting the Database
  After looking for quite some time- the class slack and TA's essentially gave me a hint to use the django-fernet-fields library that would be used to encrypt the database without any issues. I installed django-fernet-fields and used that library in models.py. 
  From here, I decided to encrypt the amount with EncryptedIntegerField and I also decided to encrypt the used variable with python's encrypt() function. The key I then used to encrypt the database is not seen by anyone except the actual machine its on (locally) so unless the machine is compromised there is no chance of getting it from the website front end.
 
 
 Secret Key Storage
 1.My first step was to install dotenv. pip install python-dotenv
 2. Then I create a .env file in your base directory where manage.py is 
 3. Then I added .env to my .gitignore file (# Or just open your .gitignore and type in .env)
 4.Added my SECRET_KEY from your settings.py file into the .env file like so (without quotes)
 **Inside of the .env file**
SECRET_KEY=<SECRETKEY> # <- Example key, SECRET_KEY=yoursecretkey
5) Inside of the settings.py file, add the following settings:

import os
import dotenv # <- New

# Add .env variables anywhere before SECRET_KEY
dotenv_file = os.path.join(BASE_DIR, ".env")
if os.path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

# UPDATE secret key
SECRET_KEY = os.environ['SECRET_KEY'] # Instead of your actual secret key


Update: I found out you can also use the config method from the package python-decouple that seems to be a bit easier:

from decouple import config

SECRET_KEY = config('SECRET_KEY')

After this, it was simple as ensuring my env file had the secret key and pushed to my repo.